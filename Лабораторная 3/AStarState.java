import java.util.*;


/**
 * Этот класс хранит базовое состояние, необходимое для вычисления алгоритма A*
 * путь по карте. Это состояние включает в себя набор "открытых путевых точек"
 * и еще одна коллекция "закрытых путевых точек." Кроме того, этот класс
 * предоставляет основные операции, необходимые алгоритму поиска пути A* для
 * выполните его обработку.
 **/
public class AStarState
{
    /**
     * Это ссылка на карту, по которой алгоритм A* перемещается.
     **/
    private Map2D map;

    /** Инициализация карты всех открытых путевых точек и их местоположения. **/
    private Map<Location, Waypoint> open_waypoints
            = new HashMap<Location, Waypoint> ();

    /** Инициализация карты всех закрытых путевых точек и их местоположения. **/
    private Map<Location, Waypoint> closed_waypoints
            = new HashMap<Location, Waypoint> ();

    /**
     * Инициализация нового объекта состояния для использования алгоритма поиска пути A*.
     **/
    public AStarState(Map2D map)
    {
        if (map == null)
            throw new NullPointerException("map cannot be null");

        this.map = map;
    }

    /** Возвращает карту, по которой перемещается A*. **/
    public Map2D getMap()
    {
        return map;
    }

    /**
     * Этот метод сканирует все открытые путевые точки и возвращает путевую точку.
     * с минимальными общими затратами. Если нет открытых путевых точек, это
     * метод возвращает null.
     **/
    public Waypoint getMinOpenWaypoint()
    {
        // Если открытых путевых точек нет, возвращает null.
        if (numOpenWaypoints() == 0)
            return null;

        // Инициализируем набор ключей всех открытых путевых точек, итератор для
        // итерации по набору и переменную для хранения наилучшей путевой точки
        // и стоимость этой путевой точки.
        Set open_waypoint_keys = open_waypoints.keySet();
        Iterator i = open_waypoint_keys.iterator();
        Waypoint best = null;
        float best_cost = Float.MAX_VALUE;

        // Сканирует все открытые путевые точки.
        while (i.hasNext())
        {
            // Сохраняет текущее местоположение.
            Location location = (Location)i.next();
            // Сохраняет текущую путевую точку.
            Waypoint waypoint = open_waypoints.get(location);
            // Сохраняет общую стоимость для текущей путевой точки.
            float waypoint_total_cost = waypoint.getTotalCost();
        // Если общая стоимость для текущей путевой точки лучше (меньше)
        // чем сохраненная стоимость для сохраненной лучшей путевой точки, поменяем
        // сохраненную путевую точку с текущей путевой точкой и сохраненнкю
        // общую стоимость с текущей общей стоимостью.
            if (waypoint_total_cost < best_cost)
            {
                best = open_waypoints.get(location);
                best_cost = waypoint_total_cost;
            }

        }
        // Возвращает путевую точку с минимальной общей стоимостью.
        return best;
    }

    /**
     * Этот метод добавляет путевую точку к (или потенциально обновляет путевую точку)
     * коллекции "открытые путевые точки". Если еще нет открытых путевых точек в новом
     * местоположении, то новая путевая точка просто добавляется в коллекцию. Однако,
     * если в новом местоположении путевых точек уже есть путевая точка, новая путевая
     * точка заменяет старую только в том случае, если новое значение путевых точек
     * "предыдущей стоимости" меньше, чем текущее значение "предыдущей стоимости" путевых точек.
     **/
    public boolean addOpenWaypoint(Waypoint newWP)
    {
        //Находит местоположение новой путевой точки.
        Location location = newWP.getLocation();

        // Проверяет, есть ли уже открытая путевая точка в новом местоположении
        // путевых точек.
        if (open_waypoints.containsKey(location))
        {
        // Если в новых маршрутных точках уже есть открытая маршрутная точка
        // проверяем, были ли новые значение путевых точек "предыдущая
        // стоимость"  меньше, чем значение текущий путевой точки "предыдущая
        // стоимость" .
            Waypoint current_waypoint = open_waypoints.get(location);
            if (newWP.getPreviousCost() < current_waypoint.getPreviousCost())
            {
                // Если значение новой путевой точки "предыдущая стоимость"
                // меньше значения текущей путевой точки "предыдущая стоимость",
                // новая путевая точка заменяет старую путевую точку и возвращает значение true.
                open_waypoints.put(location, newWP);
                return true;
            }
            // Если значение новой путевой точки "предыдущая стоимость" не меньше значения
            // текущей путевой точки "предыдущая стоимость", вернём значение false.
            return false;
        }
        // Если в новом местоположении путевых точек еще нет открытой путевой точки,
        // добавим новую путевую точку в коллекцию открытых путевых точек и верните значение true.
        open_waypoints.put(location, newWP);
        return true;
    }


    /** Возвращает текущее количество открытых путевых точек. **/
    public int numOpenWaypoints()
    {
        return open_waypoints.size();
    }

    /**
     * Этот метод перемещает путевую точку в указанном месте
     * из открытого списка в закрытый list.r
     **/
    public void closeWaypoint(Location loc)
    {
        Waypoint waypoint = open_waypoints.remove(loc);
        closed_waypoints.put(loc, waypoint);
    }

    /**
     * Возвращает значение true, если коллекция закрытых
     * путевых точек содержит путевую точку для указанного местоположения.
     **/
    public boolean isLocationClosed(Location loc)
    {
        return closed_waypoints.containsKey(loc);
    }
}